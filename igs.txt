Notes

I feel we have left the problem of worldFolds Unresolved, being how can we deal with a living nonContainer attempting to carry something.

Essentially we want different behaviour of the doAction Function based on the constraints satisfied by a given object

i.e. 

doGet :: World

Or rather, it might be better for us, given that we are separating lexer from parser. To create actions as sourced

i.e. Action = Target TokenCollection 

where Target is the source actor, with the idea that we can then check for constraint via worldFolding to find the source, failure means failure on constraint.



There is also the idea that we could totally replace IO with some sort of new layer, one which can only return tokens

This however seems a bit too grandiose as how can we deal with output

The simplest way of doing this would be to simply replace getInput with getTokens where-ever possible

What do we gain?

Well consistency, we don't need to constantly be dealing directly with strings,it also allows us to deal with conversation interestingly
We can consider saying things as Action SayT [Token] for instance This points to two things,

First we now resolve or concern over Actions having associated lists of tokens
We see here an example of the most extreme use case for an embedded token list, wherein the whole token list takes on a new level of modality.
But even here, what is gained over simply placing the list in its natural place, appending and not embedding in Say.
The main argument is one of moving more functionality to the lexer, at least insofar as we can do so without increasing its requirements
This is certainly something we can do with only syntax. 

So what was the problem

well what is the difference between Say [tokens] and Say [] toks

the only thing we might take as meaningful would be the different resultant tree structure

i.e. the first only allows for only a single interpretation whereas the second allows for subsequent lexes to produce multiple interpretations

However, this brings to light aproblem with our current lexxing, we assume that a single token can produce only a single Token, and similarly that later lexes cannot influence earlier tokens

We have been avoiding the second problem thus far by being able pre-dict all of the the possible modifications, however in order for us to continue doing this we need to be able to produce mutliple tokens from the second word.

what we need is instead of returning [(Token,[String])] we want to return [([Token],[String])] where [([],[stuff])] == [];


Ok, so we've pretty much got lexing/parsing working fine, at least structurally.
We can now go back to repairing ia.



Working on Movement, I think we might want to move away from the ghost-memory idea we had had previously

instead it might be better to revisit our action timer idea, if we simply have 

Though there is a problem here, where do we deal with the timer,

There is a couple considerations we would need to take

We need to occasionally get new input and reset the timer

we also will want to be able to trigger action at only certain intervals, i.e. moving a tile only every 5 ticks

And ideally we would have both this interval and the overall length of the timer before new input is requested vary depending on the actor.

So I'm thinking we need a function with signature  (Id,Tick,TokenCollection) -> World  -> Maybe Bool

We can then restructure our program such that we filter out any actiongroups that return nothing

Then we can filter again into two differant lists one for true, one for false,

the true list we pass to doAction

the false list we fold over, getting a new action group associated with each id

now we come to the issue of the tokenCollection

It somewhat complicates our above function, 

especially given that the whole point of preserving the tokenCollection was to preserve ambiguity & the ability to parse in multiple differant ways

So I think we are going to need to change our actiongroup to 

(Id,Tick,Intent)

Which means we need to recreate our checkIntent function Id -> Intent -> World -> Bool



Note from 

https://www.haskell.org/ghc/docs/latest/html/users_guide/using-ghc.html

If your program contains multiple modules, 
then you only need to tell GHC the name of the source file containing the Main module, 
and GHC will examine the import declarations to find the other modules that make up the program and find their source files. 
This means that, with the exception of the Main module, 
every source file should be named after the module name that it contains (with dots replaced by directory separators). 
For example, the module Data.Person would be in the file Data/Person.hs on Unix/Linux/Mac, or Data\Person.hs on Windows.






Also note


current heap profiling command

ia +RTS -hc -p -K100M -i0.005










Some more thoughts, do we want to have hidden information

due to the way we have set things up there will always be hidden information, in a certain sense

but not as information

that is to say, what is on the otherside of a wall will not be described, or reachable

hence hidden, but by more physical mechanics, the entire object is unaccesable

do we want, for instance names, of things to be learnable or always known

This might be a nice addition, but seems somewhat tricky to handle

The immediate impulse is to allow each living thing a list of names associated with every object.

The player could then manually add names to be associated with some-thing. 

Though there is then the question of whether want the callee to hear that assigned name or their own.


We also are returning to the problem of clothing, especially how it relates to bodies. 

So how would I ideally want this to work, clothing would have a certain size, you would certainly be
able to wear clothing which was too large, too a point, and clothing which was only a bit too small
would also be fine, though we may comment when putting it on, in descriptions, 
and perhaps at random intervals if it is uncomfortably so.

The question then is how we have clothing actually being worn. 
My previous thought was to have a body be represented as some sort of tree
We could then accomadate things like horse or monster armour.
Moreover if someone transforms, growing or shrinking, the clothing would be set up to properly be affected.

the idea is more fully, to have clothing also be some sort of tree, with each branch associated with a branch on the body

Aside from the problem of general implimentation, There is the more specific problem of putting clothing on

How are we supposed to know that a shirt should go on the torso and arms etc.

We could do a decent job by guessing based on lengths, branch structure and a few helpful tags.

This could be supplemented by allowing a user to specify exactly how they want to wear something. 

We can return to this later



We've recently(OCT2014) been thinking about map structure, 
we don't want to return to the practice, from last year of just going off of a heightmap
with an eye to later embedding in buildings. 
I think instead we should start with buildings proper
The current plan is to define vague building templates, 
which the program then assembles, semi randomly into the actual buildings, subject to the environment.
This would involve a 3 level structure
<Furniture> .frn
<Room> .rm
<Building> .bld

checkExtension :: String -> String -> Bool
checkExtension ext = (ext ==) . reverse . (takeWhile ('.' \= )) . reverse

The idea is that we could define a bunch of furniture items, with various properties, 
some of these could be constants or ranges, perhaps even some simple logic

We would then define rooms, with properties analagously as for furniture.
But some of the properties for rooms will be the number of pieces of furniture, each with some required properties
I.e. 1-2 tables, say and then preferably be able to say 1-3 chairs per table. for example.

Buildings are almost identically above rooms, defined with some properties, 
which we try to satisfy by collecting some number of generated rooms via the above.


<furniture>
	<chair> -- This is a tag that will be used in constructing rooms.
	<desc=a small wooden chair>
	<name=chair>
	<structure=>

<furniture>
	<chair> --note we if a <chair> is required, we can choose at random.
	<desc=a small wooden stool>
	<name=stool>

<furniture>
	<table>
	<>

<furniture>
	<door>
	<>
	
etc.

We might then want some way of indicating when the tag refers to
something else, i.e., the difference between

<furniture>
	<sink> --indicates this thing counts as a sink
	
and

<room>
	<#1-1#sink> --indicates that we should incorperate a single sink into the above
	<#2-3#sink> --indicates we should incorperate between 2 and 3 sinks 



We've recently noticed that all of these essentially have a tree structure
It has been a continual problem, that trees are fairly awkward to construct
Because of these it would be worthwhile to construct some sort of general tree builder

Now it seems a bit difficult to have this work in general
in addition to any sort of explicit tree analogue
we may want to have this apply to circuits, which are only implicitly trees


This level of generality seems to require a per data type way to extract the required information from trees

i.e.

class TreeAnalogue t where
	data TreeType :: *
	treeToData :: Tree TreeType -> [String] -> t

with type families

The string allows us to construct an algebriac data type with the tree as a part.








